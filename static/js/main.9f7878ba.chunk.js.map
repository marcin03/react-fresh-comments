{"version":3,"sources":["store/reducers/commentsReducer.js","store/actions/actionTypes.js","store/store.js","store/actions/commentsActions.js","components/Comment/Comment.js","components/CommentsList/CommentsList.js","screens/CommentsScreen/CommentsScreen.js","components/AddCommentForm/AddCommentForm.js","screens/AddCommentScreen/AddCommentScreen.js","screens/FavouriteCommentsScreen/FavouriteCommentsScreen.js","screens/Navigation/Navigation.js","config/Api.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loadingComments","loadedCommentsSuccessfully","errorLoadingComments","commentsList","selectAllComments","state","selectFavouriteComments","createSelector","allComments","filter","item","isFavourite","commentsReducer","action","type","payload","error","newCommentsList","map","comment","id","maxIdValue","Math","max","apply","o","newComment","store","createStore","applyMiddleware","thunk","requestGetCommentsFromApi","responseGetCommentsFromApi","data","errorGetCommentsFromApi","useStyles","makeStyles","theme","card","height","Comment","name","email","body","dispatch","useDispatch","classes","Card","className","CardHeader","title","subheader","CardMedia","media","image","CardContent","Typography","variant","color","component","slice","CardActions","disableSpacing","IconButton","aria-label","onClick","switchIsFavouriteComment","CommentsList","comments","Grid","xs","sm","md","key","container","spacing","CommentsScreen","useSelector","AddCommentForm","React","useState","setName","setEmail","setBody","noValidate","autoComplete","TextField","label","multiline","rowsMax","value","onChange","e","target","rows","Button","size","startIcon","AddCommentScreen","FavouriteCommentsScreen","favouriteCommentsList","Navigation","useEffect","length","fetch","method","headers","then","response","json","firstTwentyComments","catch","setValue","AppBar","position","Tabs","event","newValue","Tab","Link","to","path","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9f7878ba.chunk.js","sourcesContent":["import {\r\n  REQUEST_GET_COMMENTS,\r\n  RESPONSE_GET_COMMENTS,\r\n  ERROR_GET_COMMENTS,\r\n  SWITCH_IS_FAVOURITE,\r\n  ADD_COMMENT\r\n} from '../actions/actionTypes.js';\r\nimport {createSelector} from 'reselect'\r\n\r\nconst initialState = {\r\n  loadingComments: false,\r\n  loadedCommentsSuccessfully: false,\r\n  errorLoadingComments: false,\r\n  commentsList: [],\r\n};\r\n\r\nconst commentsReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case REQUEST_GET_COMMENTS:\r\n      return {\r\n        ...state,\r\n        loadingComments: true,\r\n        loadedCommentsSuccessfully: false,\r\n        errorLoadingComments: false,\r\n      };\r\n    case RESPONSE_GET_COMMENTS:\r\n      return {\r\n        ...state,\r\n        loadingComments: true,\r\n        loadedCommentsSuccessfully: false,\r\n        errorLoadingComments: false,\r\n        commentsList: action.payload.commentsList\r\n      };\r\n    case ERROR_GET_COMMENTS:\r\n      return {\r\n        ...state,\r\n        loadingComments: true,\r\n        loadedCommentsSuccessfully: false,\r\n        errorLoadingComments: action.payload.error,\r\n      };\r\n    case SWITCH_IS_FAVOURITE: {\r\n      const newCommentsList = state.commentsList.map((comment) => {\r\n          if (comment.id === action.payload.id) {\r\n            const isFavourite = !comment.isFavourite;\r\n            return {...comment, isFavourite}\r\n          }\r\n          return comment\r\n        }\r\n      )\r\n      return {\r\n        ...state,\r\n        commentsList: newCommentsList\r\n      };\r\n    }\r\n    case ADD_COMMENT: {\r\n      const maxIdValue = Math.max.apply(Math, state.commentsList.map(function (o) {\r\n        return o.id;\r\n      }))\r\n      const newComment = action.payload.comment;\r\n      newComment.id = maxIdValue+1\r\n      return {\r\n        ...state,\r\n        commentsList: [{...newComment}, ...state.commentsList ]\r\n      };\r\n    }\r\n\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const selectAllComments = state => state.commentsList;\r\n\r\nexport const selectFavouriteComments = createSelector(\r\n  [selectAllComments],\r\n  allComments => {\r\n    return allComments.filter((item) => {\r\n      return item.isFavourite\r\n    });\r\n  });\r\n\r\nexport default commentsReducer;","export const REQUEST_GET_COMMENTS = 'REQUEST_GET_COMMENTS';\r\nexport const RESPONSE_GET_COMMENTS = 'RESPONSE_GET_COMMENTS';\r\nexport const ERROR_GET_COMMENTS = 'ERROR_GET_COMMENTS';\r\nexport const SWITCH_IS_FAVOURITE = 'SWITCH_IS_FAVOURITE';\r\nexport const ADD_COMMENT = 'ADD_COMMENT';","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport commentsReducer from './reducers/commentsReducer';\r\n\r\nexport const store = createStore(commentsReducer, applyMiddleware(thunk));","import {commentsPath} from './../../config/Api';\r\n\r\nimport {\r\n  REQUEST_GET_COMMENTS,\r\n  RESPONSE_GET_COMMENTS,\r\n  ERROR_GET_COMMENTS,\r\n  SWITCH_IS_FAVOURITE,\r\n  ADD_COMMENT\r\n} from './actionTypes';\r\n\r\nexport const getCommentsFromApi = () => (dispatch => {\r\n  dispatch(requestGetCommentsFromApi());\r\n  fetch(`${commentsPath}`,\r\n    {\r\n      method: 'GET',\r\n      headers: {'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8',}\r\n    }\r\n  )\r\n    .then(response => response.json())\r\n    .then(data => {\r\n      let firstTwentyComments = data.slice(0, 20);\r\n      dispatch(responseGetCommentsFromApi(firstTwentyComments));\r\n    })\r\n    .catch(error => {\r\n      dispatch(errorGetCommentsFromApi(error));\r\n    })\r\n});\r\n\r\nconst requestGetCommentsFromApi = () => ({type: REQUEST_GET_COMMENTS});\r\n\r\nconst responseGetCommentsFromApi = (data) => ({\r\n  type: RESPONSE_GET_COMMENTS,\r\n  payload: {commentsList: data}\r\n});\r\nconst errorGetCommentsFromApi = (error) => ({\r\n  type: ERROR_GET_COMMENTS,\r\n  payload: {error}\r\n});\r\n\r\nexport const switchIsFavouriteComment = (id) => ({\r\n  type: SWITCH_IS_FAVOURITE,\r\n  payload: {id}\r\n});\r\n\r\nexport const addComment = (comment) => ({\r\n  type: ADD_COMMENT,\r\n  payload: {comment}\r\n});","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {\r\n  CardHeader,\r\n  Card,\r\n  IconButton,\r\n  CardMedia,\r\n  CardContent,\r\n  Typography,\r\n  CardActions,\r\n} from '@material-ui/core';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport {switchIsFavouriteComment} from './../../store/actions';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    height: '100%',\r\n  }\r\n}));\r\n\r\nexport const Comment = ({name, email, body, id, isFavourite}) => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n    <Card className={classes.card}>\r\n      <CardHeader\r\n        title={name}\r\n        subheader={email}\r\n      />\r\n      <CardMedia\r\n        className={classes.media}\r\n        image=\"/static/images/cards/paella.jpg\"\r\n        title=\"Paella dish\"\r\n      />\r\n      <CardContent>\r\n        <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\r\n          {body.slice(0, 20)}...\r\n        </Typography>\r\n      </CardContent>\r\n      <CardActions disableSpacing>\r\n        <IconButton\r\n          aria-label=\"add to favorites\"\r\n          onClick={()=>dispatch(switchIsFavouriteComment(id))}\r\n          color={isFavourite?'secondary':'default'}\r\n        >\r\n          <FavoriteIcon />\r\n        </IconButton>\r\n      </CardActions>\r\n    </Card>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {Comment} from './../Comment/Comment'\r\nimport {Grid} from '@material-ui/core';\r\n\r\nexport const CommentsList = ({commentsList}) => {\r\n  const comments = commentsList.map(item => {\r\n    return(\r\n      <Grid item xs={12} sm={6} md={4} key={item.id}>\r\n        <Comment {...item} />\r\n      </Grid>\r\n    )\r\n  })\r\n  return (\r\n    <div className=\"commentsList\">\r\n      <Grid container spacing={2}>\r\n        {comments}\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {selectAllComments} from '../../store/reducers/commentsReducer';\r\nimport {CommentsList} from '../../components/CommentsList/CommentsList'\r\n\r\nexport const CommentsScreen = () => {\r\n  const commentsList = useSelector(selectAllComments);\r\n  return (\r\n    <div className=\"commentsScreen\">\r\n      <CommentsList commentsList={commentsList}/>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {useDispatch} from 'react-redux';\r\nimport {\r\n  TextField,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport {addComment} from './../../store/actions';\r\nimport SaveIcon from '@material-ui/icons/Save';\r\n\r\nexport const AddCommentForm = () => {\r\n  const [name, setName] = React.useState(\"\");\r\n  const [email, setEmail] = React.useState(\"\");\r\n  const [body, setBody] = React.useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const handleSaveComment = ()=>{\r\n    if(!name||!email||!body){\r\n      return;\r\n    }\r\n    dispatch(addComment({name, email, body}))\r\n    setName(\"\");\r\n    setEmail(\"\");\r\n    setBody(\"\")\r\n  }\r\n  return (\r\n    <form noValidate autoComplete=\"off\">\r\n      <div className=\"form-field\">\r\n        <TextField\r\n          id=\"standard-multiline-flexible\"\r\n          label=\"Name\"\r\n          multiline\r\n          rowsMax=\"4\"\r\n          value={name}\r\n          onChange={(e)=>setName(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-field\">\r\n        <TextField\r\n          id=\"standard-textarea\"\r\n          label=\"Email\"\r\n          multiline\r\n          value={email}\r\n          onChange={(e)=>setEmail(e.target.value)}\r\n        />\r\n      </div>\r\n      <div className=\"form-field\">\r\n        <TextField\r\n          id=\"standard-multiline-static\"\r\n          label=\"Multiline\"\r\n          multiline\r\n          rows=\"4\"\r\n          value={body}\r\n          onChange={(e)=>setBody(e.target.value)}\r\n        />\r\n      </div>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        startIcon={<SaveIcon />}\r\n        onClick = {handleSaveComment}\r\n      >\r\n        Save Comment\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {AddCommentForm} from '../../components/AddCommentForm/AddCommentForm'\r\n\r\nexport const AddCommentScreen = () => {\r\n  return (\r\n    <div className=\"addCommentScreen\">\r\n      <AddCommentForm/>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {selectFavouriteComments} from '../../store/reducers/commentsReducer';\r\nimport {CommentsList} from '../../components/CommentsList/CommentsList'\r\n\r\nexport const FavouriteCommentsScreen = () => {\r\n  const favouriteCommentsList = useSelector(selectFavouriteComments);\r\n\r\n  return (\r\n    <div className=\"commentsScreen\">\r\n      <CommentsList commentsList={favouriteCommentsList}/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {BrowserRouter as Router, Route, Switch, Link} from 'react-router-dom'\r\nimport {CommentsScreen} from './../CommentsScreen/CommentsScreen';\r\nimport {AddCommentScreen} from './../AddCommentScreen/AddCommentScreen';\r\nimport {FavouriteCommentsScreen} from './../FavouriteCommentsScreen/FavouriteCommentsScreen';\r\nimport {AppBar, Tabs, Tab} from '@material-ui/core';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getCommentsFromApi} from '../../store/actions/index';\r\nimport {selectAllComments} from '../../store/reducers/commentsReducer';\r\n\r\nexport const Navigation = () => {\r\n  const commentsList = useSelector(selectAllComments);\r\n  useEffect(() => {\r\n      if(commentsList.length===0){\r\n        dispatch(getCommentsFromApi())\r\n      }\r\n    }\r\n    //eslint-disable-next-line\r\n    , []);\r\n  const dispatch = useDispatch();\r\n\r\n\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  return (\r\n    <Router>\r\n      <AppBar position=\"static\">\r\n        <Tabs\r\n          variant=\"fullWidth\"\r\n          value={value}\r\n          onChange={handleChange}\r\n        >\r\n          <Tab\r\n            label=\"All\"\r\n            component={Link}\r\n            to=\"/\"/>\r\n          />\r\n          <Tab\r\n            label=\"Favourites\"\r\n            component={Link}\r\n            to=\"/favourites\"/>\r\n          />\r\n          <Tab\r\n            label=\"Add\"\r\n            component={Link}\r\n            to=\"/add\"/>\r\n          />\r\n        </Tabs>\r\n      </AppBar>\r\n      <div className=\"App\">\r\n      <Switch>\r\n        <Route path=\"/add\" component={AddCommentScreen}/>\r\n        <Route path=\"/favourites\" component={FavouriteCommentsScreen}/>\r\n        <Route path=\"/\" component={CommentsScreen}/>\r\n      </Switch>\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","export const commentsPath = 'https://jsonplaceholder.typicode.com/comments';","import React  from 'react';\r\nimport './App.css';\r\nimport {Provider} from 'react-redux';\r\nimport {store} from './store/store';\r\nimport {Navigation} from './screens/Navigation/Navigation';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <Navigation/>\r\n      <div className=\"App\">\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}